{"version":3,"sources":["Components/WeatherInfo.js","Components/WeatherContainer.js","Components/App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","data","temp","humidity","desc","city","Fragment","className","WeatherContainer","useState","searchQuery","setSearchQuery","weatherData","setWeatherData","isValidZipCode","setIsValidZipCode","placeholder","onChange","event","zipCode","target","value","isValid","test","ValidateZipCode","length","maxLength","onClick","fetch","then","response","json","main","weather","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kRA2BeA,MAxBf,SAAqBC,GAAO,MAEaA,EAAMC,KAArCC,EAFkB,EAElBA,KAAMC,EAFY,EAEZA,SAAUC,EAFE,EAEFA,KAAMC,EAFJ,EAEIA,KAC9B,OACE,kBAAC,IAAMC,SAAP,KACE,4BAAKF,GACL,6BAASG,UAAU,qBACnB,yBAAKA,UAAU,sBACb,oCACA,2BAAIF,IAEN,yBAAKE,UAAU,sBACb,2CACA,2BAAIL,EAAK,0BAAMK,UAAU,kBAAzB,OAEF,yBAAKA,UAAU,sBACb,wCACA,2BAAIJ,EAAJ,SC4DOK,MA5Ef,WACE,IAD0B,EAEYC,mBAAS,IAFrB,mBAEnBC,EAFmB,KAENC,EAFM,OAGYF,mBAAS,CAC7CP,KAAM,KACNC,SAAU,KACVC,KAAM,KACNC,KAAM,OAPkB,mBAGnBO,EAHmB,KAGNC,EAHM,OASkBJ,oBAAS,GAT3B,mBASnBK,EATmB,KASHC,EATG,KA8C1B,OACE,6BAASR,UAAU,qBACjB,4BAAQA,UAAU,kBAChB,0CACA,6BACE,2BACES,YAAY,WACZT,UAAU,eACVU,SA3CV,SAA2BC,GACzB,IAAIC,EAAUD,EAAME,OAAOC,MACvBC,EASN,SAAyBH,GAEvB,MADY,WACCI,KAAKJ,GAXJK,CAAgBL,GAC9BR,EAAeQ,GACXG,GAAsB,IAAXH,GAAoC,IAAnBG,EAAQG,OACtCV,GAAkB,GAElBA,GAAkB,IAqCZW,UAAU,MAEZ,4BAAQC,QA9BhB,WACOb,GAAkC,KAAhBJ,EAIvBkB,MAAM,uDAAD,OACoDlB,EADpD,qBA/BS,qCAkCXmB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC5B,GAAD,OACJY,EAAe,CACbX,KAAMD,EAAK+B,KAAK9B,KAChBC,SAAUF,EAAK+B,KAAK7B,SACpBC,KAAMH,EAAKgC,QAAQ,GAAGD,KACtB3B,KAAMJ,EAAKiC,UAZfnB,GAAkB,IA4BmBR,UAAU,kBAA3C,YAKJ,uBAAGA,UAAU,SAASO,EAAiB,GAAK,oBAC5C,6BAASP,UAAU,gBACK,OAArBK,EAAYV,KACX,mDACuB,uBAAGK,UAAU,kBAAb,aAGvB,kBAAC,EAAD,CAAaN,KAAMW,OC7DduB,MARf,WACE,OACE,6BAAS5B,UAAU,iBACjB,kBAAC,EAAD,QCKc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90028c3f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Styles/Weather.css\";\n\nfunction WeatherInfo(props) {\n  // object destructuring\n  const { temp, humidity, desc, city } = props.data;\n  return (\n    <React.Fragment>\n      <h3>{desc}</h3>\n      <section className='weather-data-flex'>\n      <div className='header-description'>\n        <h4>City</h4>\n        <p>{city}</p>\n      </div>\n      <div className='header-description'>\n        <h4>Temperature</h4>\n        <p>{temp}<span className='degree-symbol'></span> K</p>\n      </div>\n      <div className='header-description'>\n        <h4>Humidity</h4>\n        <p>{humidity}%</p>\n      </div>\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default WeatherInfo;\n","import React, { useState } from \"react\";\nimport \"../Styles/Weather.css\";\nimport WeatherInfo from \"./WeatherInfo\";\n\nfunction WeatherContainer() {\n  const API_KEY = \"eb7ed06915a8414a6745dc2741a2cd5a\";\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [weatherData, setWeatherData] = useState({\n    temp: null,\n    humidity: null,\n    desc: null,\n    city: null,\n  });\n  const [isValidZipCode, setIsValidZipCode] = useState(true);\n\n  function updateSearchQuery(event) {\n    let zipCode = event.target.value;\n    let isValid = ValidateZipCode(zipCode);\n    setSearchQuery(zipCode);\n    if (isValid || zipCode == \"\" || isValid.length === 5) {\n      setIsValidZipCode(true);\n    } else {\n      setIsValidZipCode(false);\n    }\n  }\n\n  function ValidateZipCode(zipCode) {\n    let regex = /[0-9]{5}/;\n    return regex.test(zipCode);\n  }\n\n  function getWeatherData() {\n    if (!isValidZipCode || searchQuery === \"\") {\n      setIsValidZipCode(false);\n      return;\n    }\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?zip=${searchQuery},us&appid=${API_KEY}`\n    )\n      .then((response) => response.json())\n      .then((data) =>\n        setWeatherData({\n          temp: data.main.temp,\n          humidity: data.main.humidity,\n          desc: data.weather[0].main,\n          city: data.name,\n        })\n      );\n  }\n\n  return (\n    <section className=\"weather-container\">\n      <header className=\"weather-header\">\n        <h3>El App√≥</h3>\n        <div>\n          <input\n            placeholder=\"Zip Code\"\n            className=\"search-input\"\n            onChange={updateSearchQuery}\n            maxLength=\"5\"\n          />\n          <button onClick={getWeatherData} className=\"material-icons\">\n            search\n          </button>\n        </div>\n      </header>\n      <p className=\"error\">{isValidZipCode ? \"\" : \"Invalid Zip Code\"}</p>\n      <section className=\"weather-info\">\n        {weatherData.temp === null ? (\n          <p>\n            No Weather to Display<i className=\"material-icons\">wb_sunny</i>\n          </p>\n        ) : (\n          <WeatherInfo data={weatherData} />\n        )}\n      </section>\n    </section>\n  );\n}\n\nexport default WeatherContainer;\n","import React from 'react';\nimport '../Styles/App.css';\nimport WeatherContainer from './WeatherContainer';\n\nfunction App() {\n  return (\n    <section className=\"app-container\">\n      <WeatherContainer></WeatherContainer>      \n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}